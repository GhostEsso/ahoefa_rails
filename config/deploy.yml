# Name of your application. Used to uniquely configure containers.
service: ahoefa-rails

# Name of the container image.
image: phildev060/ahoefa-rails

# Deploy to these servers.
servers:
  web:
    hosts:
      - <%= ENV["PRODUCTION_SERVER_IP"] %>
    labels:
      traefik.http.routers.ahoefa.rule: "Host(`ahoefa.com`)"
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: app.example.com
  # Proxy connects to your container on port 80 by default.
  # app_port: 3000

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: <%= ENV["DOCKER_USERNAME"] %>
  password: <%= ENV["DOCKER_PASSWORD"] %>

# Configure builder setup.
builder:
  arch: amd64
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= ENV["RBENV_VERSION"] || ENV["rvm_ruby_string"] || "#{RUBY_ENGINE}-#{RUBY_ENGINE_VERSION}" %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
# env:
#   clear:
#     DB_HOST: 192.168.0.2
#   secret:
#     - RAILS_MASTER_KEY

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
volumes:
  - "/var/lib/ahoefa-rails/storage:/rails/storage"
  - "/var/lib/ahoefa-rails/public:/rails/public"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  db:
    image: postgres:15
    host: <%= ENV["DB_HOST"] %>
    port: 5432
    env:
      secret:
        - POSTGRES_USER
        - POSTGRES_PASSWORD
    volumes:
      - "/var/lib/postgresql/data:/var/lib/postgresql/data"

# Variables d'environnement
env:
  clear:
    RAILS_SERVE_STATIC_FILES: "true"
    RAILS_LOG_TO_STDOUT: "true"
  secret:
    - RAILS_MASTER_KEY
    - DATABASE_URL
    - CLOUDINARY_CLOUD_NAME
    - CLOUDINARY_API_KEY
    - CLOUDINARY_API_SECRET

# Healthcheck
healthcheck:
  path: /up
  port: 3000
  max_attempts: 10
  interval: 2

# Hooks pour les tâches de déploiement
hooks:
  pre-deploy:
    - command: bundle exec rails db:migrate
      once: true
  post-deploy:
    - command: bundle exec rails db:seed
      once: true
